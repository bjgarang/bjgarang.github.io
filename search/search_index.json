{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9996\u9875 Hello there! I\u2019m MacDown , the open source Markdown editor for OS X. Let me introduce myself. Macdown1 Macdown2 Macdown3 Macdown4 Macdown5 Macdown6 Macdown7 Macdown8 Macdown9 Macdown10 Macdown11 Macdown12 Macdown13 Macdown14 Macdown15 Macdown16 Macdown17 Macdown18 Macdown19 Macdown20 Macdown21 Macdown22 Macdown23 Macdown24 Macdown25 Macdown26 Macdown27 Macdown28 Macdown29 Macdown30 Macdown31 Macdown32 Macdown33 Macdown34 Macdown35 Macdown36 Macdown37 Macdown38 Macdown39 Macdown40 Macdown41 Macdown42 Macdown43 Macdown44 Macdown45 Macdown46 Macdown47 Macdown48 Macdown49 Macdown50 Markdown and I Markdown is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found here . MacDown is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel. I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the Markdown preference pane . You can specify extra HTML rendering options through the Rendering preference pane . You can customize the editor window to you liking in the Editor preferences pane : You can configure various application (that's me!) behaviors in the General preference pane . The Basics Before I tell you about all the extra syntaxes and capabilities I have, I'll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the Markdown preference pane . Lets jump right in. Line Breaks To force a line break, put two spaces and a newline (return) at the end of the line. This two-line bullet won't break This two-line bullet will break Here is the code: * This two-line bullet won't break * This two-line bullet will break Strong and Emphasize Strong : **Strong** or __Strong__ (Command-B) Emphasize : *Emphasize* or _Emphasize_ [^emphasize] (Command-I) Headers (like this one!) Header 1 ======== Header 2 -------- or # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6 Links and Email Inline Just put angle brackets around an email and it becomes clickable: uranusjr@gmail.com Same thing with urls: http://macdown.uranusjr.com http://macdown.uranusjr.com Perhaps you want to some link text like this: Macdown Website [Macdown Website](http://macdown.uranusjr.com \"Title\") (The title is optional) Reference style Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together. Make a link [a link][arbitrary_id] then on it's own line anywhere else in the file: [arbitrary_id]: http://macdown.uranusjr.com \"Title\" If the link text itself would make a good id, you can link like this [like this][] , then on it's own line anywhere else in the file: [like this]: http://macdown.uranusjr.com Images Inline ![Alt Image Text](path/or/url/to.jpg \"Optional Title\") Reference style ![Alt Image Text][image-id] on it's own line elsewhere: [image-id]: path/or/url/to.jpg \"Optional Title\" Lists Lists must be preceded by a blank line (or block element) Unordered lists start each item with a * - works too Indent a level to make a nested list Ordered lists are supported. Start each item (number-period-space) like 1. It doesn't matter what number you use, I will render them sequentially So you might want to start each line with 1. and let me sort it out Here is the code: * Lists must be preceded by a blank line (or block element) * Unordered lists start each item with a `*` - `-` works too * Indent a level to make a nested list 1. Ordered lists are supported. 2. Start each item (number-period-space) like `1. ` 42. It doesn't matter what number you use, I will render them sequentially 1. So you might want to start each line with `1.` and let me sort it out Block Quote Angle brackets are used for block quotes. Technically not every line needs to start with a as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. Lists Links Etc. Here is the code: Angle brackets ` ` are used for block quotes. Technically not every line needs to start with a ` ` as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. * Lists * [Links][arbitrary_id] * Etc. Inline Code Inline code is indicated by surrounding it with backticks: `Inline code` If your code has `backticks` that need to be displayed, you can use double backticks: ``Code with `backticks` `` (mind the spaces preceding the final set of backticks) Block Code If you indent at least four spaces or one tab, I'll display a code block. print('This is a code block') print('The block must be preceded by a blank line') print('Then indent at least 4 spaces or 1 tab') print('Nesting does nothing. Your code is displayed Literally') I also know how to do something called Fenced Code Blocks which I will tell you about later. Horizontal Rules If you type three asterisks *** or three dashes --- on a line, I'll display a horizontal rule: The Markdown Preference Pane This is where I keep all preferences related to how I parse markdown into html. Document Formatting The Smartypants extension automatically transforms straight quotes ( \" and ' ) in your text into typographer\u2019s quotes ( \u201c , \u201d , \u2018 , and \u2019 ) according to the context. Very useful if you\u2019re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Block Formatting Table This is a table: First Header Second Header Content Cell Content Cell Content Cell Content Cell You can align cell contents with syntax like this: Left Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 The left- and right-most pipes ( | ) are only aesthetic, and can be omitted. The spaces don\u2019t matter, either. Alignment depends solely on : marks. Fenced Code Block This is a fenced code block: print('Hello world!') You can also use waves ( ~ ) instead of back ticks ( ` ): print('Hello world!') You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the Enable highlighting in code blocks option. This is what happens if you enable it: I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See relevant sections on the official site for a full list of supported syntaxes. Inline Formatting The following is a list of optional inline markups supported: Option name Markup Result if enabled Intra-word emphasis So A*maz*ing So A maz ing Strikethrough \\~~Much wow\\~~ Much wow Underline [^under] _So doge_ So doge Quote [^quote] \\\"Such editor\\\" Such editor Highlight \\==So good\\== So good Superscript hoge\\^(fuga) hoge fuga Autolink http://t.co http://t.co Footnotes [\\^4] and [\\^4]: [^4] and footnote 4 [^4]: You don't have to use a number. Arbitrary things like [^footy note4] and [^footy note4]: will also work. But they will render as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. The Rendering Preference Pane This is where I keep preferences relating to how I render and style the parsed markdown in the preview window. CSS You can choose different css files for me to use to render your html. You can even customize or add your own custom css files. Syntax Highlighting You have already seen how I can syntax highlight your fenced code blocks. See the Fenced Code Block section if you haven\u2019t! You can also choose different themes for syntax highlighting. TeX-like Math Syntax I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): 1 + 1 , and block math: \\[ A^T_S = B \\] or (in MathML) A S T = B Task List Syntax [x] I can render checkbox list syntax [x] I support nesting [x] I support ordered and unordered lists [ ] I don't support clicking checkboxes directly in the html window Jekyll front-matter If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with --- . For example: --- title: Macdown is my friend date: 2014-06-06 20:00:00 --- Render newline literally Normally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some other program render it. The General Preferences Pane This is where I keep preferences related to application behavior. The General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit command-R instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases. The Editor Preference Pane This is where I keep preferences related to the behavior and styling of the editing window. Styling My editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of Mou \u2019s creator, Chen Luo) if you don\u2019t know where to start. You can also edit, or even add new themes if you want to! Just click the Reveal button, and start moving things around. Remember to use the correct file extension ( .styles ), though. I\u2019m picky about that. I offer auto-completion and other functions to ease your editing experience. If you don\u2019t like it, however, you can turn them off. Hack On That\u2019s about it. Thanks for listening. I\u2019ll be quiet from now on (unless there\u2019s an update about the app\u2014I\u2019ll remind you for that!). Happy writing! [^emphasize]: If Underlines is turned on, _this notation_ will render as underlined instead of emphasized [^under]: If Underline is disabled _this_ will be rendered as emphasized instead of being underlined. [^quote]: Quote replaces literal \" characters with html q tags. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Note that Quote is different from blockquote , which is part of standard Markdown. [^math]: Internet connection required.","title":"\u9996\u9875"},{"location":"#_1","text":"Hello there! I\u2019m MacDown , the open source Markdown editor for OS X. Let me introduce myself.","title":"\u9996\u9875"},{"location":"#macdown1","text":"","title":"Macdown1"},{"location":"#macdown2","text":"","title":"Macdown2"},{"location":"#macdown3","text":"","title":"Macdown3"},{"location":"#macdown4","text":"","title":"Macdown4"},{"location":"#macdown5","text":"","title":"Macdown5"},{"location":"#macdown6","text":"","title":"Macdown6"},{"location":"#macdown7","text":"","title":"Macdown7"},{"location":"#macdown8","text":"","title":"Macdown8"},{"location":"#macdown9","text":"","title":"Macdown9"},{"location":"#macdown10","text":"","title":"Macdown10"},{"location":"#macdown11","text":"","title":"Macdown11"},{"location":"#macdown12","text":"","title":"Macdown12"},{"location":"#macdown13","text":"","title":"Macdown13"},{"location":"#macdown14","text":"","title":"Macdown14"},{"location":"#macdown15","text":"","title":"Macdown15"},{"location":"#macdown16","text":"","title":"Macdown16"},{"location":"#macdown17","text":"","title":"Macdown17"},{"location":"#macdown18","text":"","title":"Macdown18"},{"location":"#macdown19","text":"","title":"Macdown19"},{"location":"#macdown20","text":"","title":"Macdown20"},{"location":"#macdown21","text":"","title":"Macdown21"},{"location":"#macdown22","text":"","title":"Macdown22"},{"location":"#macdown23","text":"","title":"Macdown23"},{"location":"#macdown24","text":"","title":"Macdown24"},{"location":"#macdown25","text":"","title":"Macdown25"},{"location":"#macdown26","text":"","title":"Macdown26"},{"location":"#macdown27","text":"","title":"Macdown27"},{"location":"#macdown28","text":"","title":"Macdown28"},{"location":"#macdown29","text":"","title":"Macdown29"},{"location":"#macdown30","text":"","title":"Macdown30"},{"location":"#macdown31","text":"","title":"Macdown31"},{"location":"#macdown32","text":"","title":"Macdown32"},{"location":"#macdown33","text":"","title":"Macdown33"},{"location":"#macdown34","text":"","title":"Macdown34"},{"location":"#macdown35","text":"","title":"Macdown35"},{"location":"#macdown36","text":"","title":"Macdown36"},{"location":"#macdown37","text":"","title":"Macdown37"},{"location":"#macdown38","text":"","title":"Macdown38"},{"location":"#macdown39","text":"","title":"Macdown39"},{"location":"#macdown40","text":"","title":"Macdown40"},{"location":"#macdown41","text":"","title":"Macdown41"},{"location":"#macdown42","text":"","title":"Macdown42"},{"location":"#macdown43","text":"","title":"Macdown43"},{"location":"#macdown44","text":"","title":"Macdown44"},{"location":"#macdown45","text":"","title":"Macdown45"},{"location":"#macdown46","text":"","title":"Macdown46"},{"location":"#macdown47","text":"","title":"Macdown47"},{"location":"#macdown48","text":"","title":"Macdown48"},{"location":"#macdown49","text":"","title":"Macdown49"},{"location":"#macdown50","text":"","title":"Macdown50"},{"location":"#markdown-and-i","text":"Markdown is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found here . MacDown is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel. I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the Markdown preference pane . You can specify extra HTML rendering options through the Rendering preference pane . You can customize the editor window to you liking in the Editor preferences pane : You can configure various application (that's me!) behaviors in the General preference pane .","title":"Markdown and I"},{"location":"#the-basics","text":"Before I tell you about all the extra syntaxes and capabilities I have, I'll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the Markdown preference pane . Lets jump right in.","title":"The Basics"},{"location":"#line-breaks","text":"To force a line break, put two spaces and a newline (return) at the end of the line. This two-line bullet won't break This two-line bullet will break Here is the code: * This two-line bullet won't break * This two-line bullet will break","title":"Line Breaks"},{"location":"#strong-and-emphasize","text":"Strong : **Strong** or __Strong__ (Command-B) Emphasize : *Emphasize* or _Emphasize_ [^emphasize] (Command-I)","title":"Strong and Emphasize"},{"location":"#headers-like-this-one","text":"Header 1 ======== Header 2 -------- or # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6","title":"Headers (like this one!)"},{"location":"#links-and-email","text":"","title":"Links and Email"},{"location":"#inline","text":"Just put angle brackets around an email and it becomes clickable: uranusjr@gmail.com Same thing with urls: http://macdown.uranusjr.com http://macdown.uranusjr.com Perhaps you want to some link text like this: Macdown Website [Macdown Website](http://macdown.uranusjr.com \"Title\") (The title is optional)","title":"Inline"},{"location":"#reference-style","text":"Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together. Make a link [a link][arbitrary_id] then on it's own line anywhere else in the file: [arbitrary_id]: http://macdown.uranusjr.com \"Title\" If the link text itself would make a good id, you can link like this [like this][] , then on it's own line anywhere else in the file: [like this]: http://macdown.uranusjr.com","title":"Reference style"},{"location":"#images","text":"","title":"Images"},{"location":"#inline_1","text":"![Alt Image Text](path/or/url/to.jpg \"Optional Title\")","title":"Inline"},{"location":"#reference-style_1","text":"![Alt Image Text][image-id] on it's own line elsewhere: [image-id]: path/or/url/to.jpg \"Optional Title\"","title":"Reference style"},{"location":"#lists","text":"Lists must be preceded by a blank line (or block element) Unordered lists start each item with a * - works too Indent a level to make a nested list Ordered lists are supported. Start each item (number-period-space) like 1. It doesn't matter what number you use, I will render them sequentially So you might want to start each line with 1. and let me sort it out Here is the code: * Lists must be preceded by a blank line (or block element) * Unordered lists start each item with a `*` - `-` works too * Indent a level to make a nested list 1. Ordered lists are supported. 2. Start each item (number-period-space) like `1. ` 42. It doesn't matter what number you use, I will render them sequentially 1. So you might want to start each line with `1.` and let me sort it out","title":"Lists"},{"location":"#block-quote","text":"Angle brackets are used for block quotes. Technically not every line needs to start with a as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. Lists Links Etc. Here is the code: Angle brackets ` ` are used for block quotes. Technically not every line needs to start with a ` ` as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. * Lists * [Links][arbitrary_id] * Etc.","title":"Block Quote"},{"location":"#inline-code","text":"Inline code is indicated by surrounding it with backticks: `Inline code` If your code has `backticks` that need to be displayed, you can use double backticks: ``Code with `backticks` `` (mind the spaces preceding the final set of backticks)","title":"Inline Code"},{"location":"#block-code","text":"If you indent at least four spaces or one tab, I'll display a code block. print('This is a code block') print('The block must be preceded by a blank line') print('Then indent at least 4 spaces or 1 tab') print('Nesting does nothing. Your code is displayed Literally') I also know how to do something called Fenced Code Blocks which I will tell you about later.","title":"Block Code"},{"location":"#horizontal-rules","text":"If you type three asterisks *** or three dashes --- on a line, I'll display a horizontal rule:","title":"Horizontal Rules"},{"location":"#document-formatting","text":"The Smartypants extension automatically transforms straight quotes ( \" and ' ) in your text into typographer\u2019s quotes ( \u201c , \u201d , \u2018 , and \u2019 ) according to the context. Very useful if you\u2019re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.","title":"Document Formatting"},{"location":"#block-formatting","text":"","title":"Block Formatting"},{"location":"#table","text":"This is a table: First Header Second Header Content Cell Content Cell Content Cell Content Cell You can align cell contents with syntax like this: Left Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 The left- and right-most pipes ( | ) are only aesthetic, and can be omitted. The spaces don\u2019t matter, either. Alignment depends solely on : marks.","title":"Table"},{"location":"#fenced-code-block","text":"This is a fenced code block: print('Hello world!') You can also use waves ( ~ ) instead of back ticks ( ` ): print('Hello world!') You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the Enable highlighting in code blocks option. This is what happens if you enable it: I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See relevant sections on the official site for a full list of supported syntaxes.","title":"Fenced Code Block"},{"location":"#inline-formatting","text":"The following is a list of optional inline markups supported: Option name Markup Result if enabled Intra-word emphasis So A*maz*ing So A maz ing Strikethrough \\~~Much wow\\~~ Much wow Underline [^under] _So doge_ So doge Quote [^quote] \\\"Such editor\\\" Such editor Highlight \\==So good\\== So good Superscript hoge\\^(fuga) hoge fuga Autolink http://t.co http://t.co Footnotes [\\^4] and [\\^4]: [^4] and footnote 4 [^4]: You don't have to use a number. Arbitrary things like [^footy note4] and [^footy note4]: will also work. But they will render as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes.","title":"Inline Formatting"},{"location":"#css","text":"You can choose different css files for me to use to render your html. You can even customize or add your own custom css files.","title":"CSS"},{"location":"#syntax-highlighting","text":"You have already seen how I can syntax highlight your fenced code blocks. See the Fenced Code Block section if you haven\u2019t! You can also choose different themes for syntax highlighting.","title":"Syntax Highlighting"},{"location":"#tex-like-math-syntax","text":"I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): 1 + 1 , and block math: \\[ A^T_S = B \\] or (in MathML) A S T = B","title":"TeX-like Math Syntax"},{"location":"#task-list-syntax","text":"[x] I can render checkbox list syntax [x] I support nesting [x] I support ordered and unordered lists [ ] I don't support clicking checkboxes directly in the html window","title":"Task List Syntax"},{"location":"#jekyll-front-matter","text":"If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with --- . For example: --- title: Macdown is my friend date: 2014-06-06 20:00:00 ---","title":"Jekyll front-matter"},{"location":"#render-newline-literally","text":"Normally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some other program render it.","title":"Render newline literally"},{"location":"#styling","text":"My editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of Mou \u2019s creator, Chen Luo) if you don\u2019t know where to start. You can also edit, or even add new themes if you want to! Just click the Reveal button, and start moving things around. Remember to use the correct file extension ( .styles ), though. I\u2019m picky about that. I offer auto-completion and other functions to ease your editing experience. If you don\u2019t like it, however, you can turn them off.","title":"Styling"},{"location":"#hack-on","text":"That\u2019s about it. Thanks for listening. I\u2019ll be quiet from now on (unless there\u2019s an update about the app\u2014I\u2019ll remind you for that!). Happy writing! [^emphasize]: If Underlines is turned on, _this notation_ will render as underlined instead of emphasized [^under]: If Underline is disabled _this_ will be rendered as emphasized instead of being underlined. [^quote]: Quote replaces literal \" characters with html q tags. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Note that Quote is different from blockquote , which is part of standard Markdown. [^math]: Internet connection required.","title":"Hack On"},{"location":"\u751f\u6d3b/life/","text":"\u9996\u9875 Hello there! I\u2019m MacDown , the open source Markdown editor for OS X. Let me introduce myself. Macdown1 Macdown2 Macdown3 Macdown4 Macdown5 Macdown6 Macdown7 Macdown8 Macdown9 Macdown10 Macdown11 Macdown12 Macdown13 Macdown14 Macdown15 Macdown16 Macdown17 Macdown18 Macdown19 Macdown20 Macdown21 Macdown22 Macdown23 Macdown24 Macdown25 Macdown26 Macdown27 Macdown28 Macdown29 Macdown30 Macdown31 Macdown32 Macdown33 Macdown34 Macdown35 Macdown36 Macdown37 Macdown38 Macdown39 Macdown40 Macdown41 Macdown42 Macdown43 Macdown44 Macdown45 Macdown46 Macdown47 Macdown48 Macdown49 Macdown50 Markdown and I Markdown is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found here . MacDown is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel. I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the Markdown preference pane . You can specify extra HTML rendering options through the Rendering preference pane . You can customize the editor window to you liking in the Editor preferences pane : You can configure various application (that's me!) behaviors in the General preference pane . The Basics Before I tell you about all the extra syntaxes and capabilities I have, I'll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the Markdown preference pane . Lets jump right in. Line Breaks To force a line break, put two spaces and a newline (return) at the end of the line. This two-line bullet won't break This two-line bullet will break Here is the code: * This two-line bullet won't break * This two-line bullet will break Strong and Emphasize Strong : **Strong** or __Strong__ (Command-B) Emphasize : *Emphasize* or _Emphasize_ [^emphasize] (Command-I) Headers (like this one!) Header 1 ======== Header 2 -------- or # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6 Links and Email Inline Just put angle brackets around an email and it becomes clickable: uranusjr@gmail.com Same thing with urls: http://macdown.uranusjr.com http://macdown.uranusjr.com Perhaps you want to some link text like this: Macdown Website [Macdown Website](http://macdown.uranusjr.com \"Title\") (The title is optional) Reference style Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together. Make a link [a link][arbitrary_id] then on it's own line anywhere else in the file: [arbitrary_id]: http://macdown.uranusjr.com \"Title\" If the link text itself would make a good id, you can link like this [like this][] , then on it's own line anywhere else in the file: [like this]: http://macdown.uranusjr.com Images Inline ![Alt Image Text](path/or/url/to.jpg \"Optional Title\") Reference style ![Alt Image Text][image-id] on it's own line elsewhere: [image-id]: path/or/url/to.jpg \"Optional Title\" Lists Lists must be preceded by a blank line (or block element) Unordered lists start each item with a * - works too Indent a level to make a nested list Ordered lists are supported. Start each item (number-period-space) like 1. It doesn't matter what number you use, I will render them sequentially So you might want to start each line with 1. and let me sort it out Here is the code: * Lists must be preceded by a blank line (or block element) * Unordered lists start each item with a `*` - `-` works too * Indent a level to make a nested list 1. Ordered lists are supported. 2. Start each item (number-period-space) like `1. ` 42. It doesn't matter what number you use, I will render them sequentially 1. So you might want to start each line with `1.` and let me sort it out Block Quote Angle brackets are used for block quotes. Technically not every line needs to start with a as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. Lists Links Etc. Here is the code: Angle brackets ` ` are used for block quotes. Technically not every line needs to start with a ` ` as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. * Lists * [Links][arbitrary_id] * Etc. Inline Code Inline code is indicated by surrounding it with backticks: `Inline code` If your code has `backticks` that need to be displayed, you can use double backticks: ``Code with `backticks` `` (mind the spaces preceding the final set of backticks) Block Code If you indent at least four spaces or one tab, I'll display a code block. print('This is a code block') print('The block must be preceded by a blank line') print('Then indent at least 4 spaces or 1 tab') print('Nesting does nothing. Your code is displayed Literally') I also know how to do something called Fenced Code Blocks which I will tell you about later. Horizontal Rules If you type three asterisks *** or three dashes --- on a line, I'll display a horizontal rule: The Markdown Preference Pane This is where I keep all preferences related to how I parse markdown into html. Document Formatting The Smartypants extension automatically transforms straight quotes ( \" and ' ) in your text into typographer\u2019s quotes ( \u201c , \u201d , \u2018 , and \u2019 ) according to the context. Very useful if you\u2019re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Block Formatting Table This is a table: First Header Second Header Content Cell Content Cell Content Cell Content Cell You can align cell contents with syntax like this: Left Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 The left- and right-most pipes ( | ) are only aesthetic, and can be omitted. The spaces don\u2019t matter, either. Alignment depends solely on : marks. Fenced Code Block This is a fenced code block: print('Hello world!') You can also use waves ( ~ ) instead of back ticks ( ` ): print('Hello world!') You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the Enable highlighting in code blocks option. This is what happens if you enable it: I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See relevant sections on the official site for a full list of supported syntaxes. Inline Formatting The following is a list of optional inline markups supported: Option name Markup Result if enabled Intra-word emphasis So A*maz*ing So A maz ing Strikethrough \\~~Much wow\\~~ Much wow Underline [^under] _So doge_ So doge Quote [^quote] \\\"Such editor\\\" Such editor Highlight \\==So good\\== So good Superscript hoge\\^(fuga) hoge fuga Autolink http://t.co http://t.co Footnotes [\\^4] and [\\^4]: [^4] and footnote 4 [^4]: You don't have to use a number. Arbitrary things like [^footy note4] and [^footy note4]: will also work. But they will render as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. The Rendering Preference Pane This is where I keep preferences relating to how I render and style the parsed markdown in the preview window. CSS You can choose different css files for me to use to render your html. You can even customize or add your own custom css files. Syntax Highlighting You have already seen how I can syntax highlight your fenced code blocks. See the Fenced Code Block section if you haven\u2019t! You can also choose different themes for syntax highlighting. TeX-like Math Syntax I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): 1 + 1 , and block math: \\[ A^T_S = B \\] or (in MathML) A S T = B Task List Syntax [x] I can render checkbox list syntax [x] I support nesting [x] I support ordered and unordered lists [ ] I don't support clicking checkboxes directly in the html window Jekyll front-matter If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with --- . For example: --- title: Macdown is my friend date: 2014-06-06 20:00:00 --- Render newline literally Normally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some other program render it. The General Preferences Pane This is where I keep preferences related to application behavior. The General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit command-R instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases. The Editor Preference Pane This is where I keep preferences related to the behavior and styling of the editing window. Styling My editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of Mou \u2019s creator, Chen Luo) if you don\u2019t know where to start. You can also edit, or even add new themes if you want to! Just click the Reveal button, and start moving things around. Remember to use the correct file extension ( .styles ), though. I\u2019m picky about that. I offer auto-completion and other functions to ease your editing experience. If you don\u2019t like it, however, you can turn them off. Hack On That\u2019s about it. Thanks for listening. I\u2019ll be quiet from now on (unless there\u2019s an update about the app\u2014I\u2019ll remind you for that!). Happy writing! [^emphasize]: If Underlines is turned on, _this notation_ will render as underlined instead of emphasized [^under]: If Underline is disabled _this_ will be rendered as emphasized instead of being underlined. [^quote]: Quote replaces literal \" characters with html q tags. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Note that Quote is different from blockquote , which is part of standard Markdown. [^math]: Internet connection required.","title":"\u9996\u9875"},{"location":"\u751f\u6d3b/life/#_1","text":"Hello there! I\u2019m MacDown , the open source Markdown editor for OS X. Let me introduce myself.","title":"\u9996\u9875"},{"location":"\u751f\u6d3b/life/#macdown1","text":"","title":"Macdown1"},{"location":"\u751f\u6d3b/life/#macdown2","text":"","title":"Macdown2"},{"location":"\u751f\u6d3b/life/#macdown3","text":"","title":"Macdown3"},{"location":"\u751f\u6d3b/life/#macdown4","text":"","title":"Macdown4"},{"location":"\u751f\u6d3b/life/#macdown5","text":"","title":"Macdown5"},{"location":"\u751f\u6d3b/life/#macdown6","text":"","title":"Macdown6"},{"location":"\u751f\u6d3b/life/#macdown7","text":"","title":"Macdown7"},{"location":"\u751f\u6d3b/life/#macdown8","text":"","title":"Macdown8"},{"location":"\u751f\u6d3b/life/#macdown9","text":"","title":"Macdown9"},{"location":"\u751f\u6d3b/life/#macdown10","text":"","title":"Macdown10"},{"location":"\u751f\u6d3b/life/#macdown11","text":"","title":"Macdown11"},{"location":"\u751f\u6d3b/life/#macdown12","text":"","title":"Macdown12"},{"location":"\u751f\u6d3b/life/#macdown13","text":"","title":"Macdown13"},{"location":"\u751f\u6d3b/life/#macdown14","text":"","title":"Macdown14"},{"location":"\u751f\u6d3b/life/#macdown15","text":"","title":"Macdown15"},{"location":"\u751f\u6d3b/life/#macdown16","text":"","title":"Macdown16"},{"location":"\u751f\u6d3b/life/#macdown17","text":"","title":"Macdown17"},{"location":"\u751f\u6d3b/life/#macdown18","text":"","title":"Macdown18"},{"location":"\u751f\u6d3b/life/#macdown19","text":"","title":"Macdown19"},{"location":"\u751f\u6d3b/life/#macdown20","text":"","title":"Macdown20"},{"location":"\u751f\u6d3b/life/#macdown21","text":"","title":"Macdown21"},{"location":"\u751f\u6d3b/life/#macdown22","text":"","title":"Macdown22"},{"location":"\u751f\u6d3b/life/#macdown23","text":"","title":"Macdown23"},{"location":"\u751f\u6d3b/life/#macdown24","text":"","title":"Macdown24"},{"location":"\u751f\u6d3b/life/#macdown25","text":"","title":"Macdown25"},{"location":"\u751f\u6d3b/life/#macdown26","text":"","title":"Macdown26"},{"location":"\u751f\u6d3b/life/#macdown27","text":"","title":"Macdown27"},{"location":"\u751f\u6d3b/life/#macdown28","text":"","title":"Macdown28"},{"location":"\u751f\u6d3b/life/#macdown29","text":"","title":"Macdown29"},{"location":"\u751f\u6d3b/life/#macdown30","text":"","title":"Macdown30"},{"location":"\u751f\u6d3b/life/#macdown31","text":"","title":"Macdown31"},{"location":"\u751f\u6d3b/life/#macdown32","text":"","title":"Macdown32"},{"location":"\u751f\u6d3b/life/#macdown33","text":"","title":"Macdown33"},{"location":"\u751f\u6d3b/life/#macdown34","text":"","title":"Macdown34"},{"location":"\u751f\u6d3b/life/#macdown35","text":"","title":"Macdown35"},{"location":"\u751f\u6d3b/life/#macdown36","text":"","title":"Macdown36"},{"location":"\u751f\u6d3b/life/#macdown37","text":"","title":"Macdown37"},{"location":"\u751f\u6d3b/life/#macdown38","text":"","title":"Macdown38"},{"location":"\u751f\u6d3b/life/#macdown39","text":"","title":"Macdown39"},{"location":"\u751f\u6d3b/life/#macdown40","text":"","title":"Macdown40"},{"location":"\u751f\u6d3b/life/#macdown41","text":"","title":"Macdown41"},{"location":"\u751f\u6d3b/life/#macdown42","text":"","title":"Macdown42"},{"location":"\u751f\u6d3b/life/#macdown43","text":"","title":"Macdown43"},{"location":"\u751f\u6d3b/life/#macdown44","text":"","title":"Macdown44"},{"location":"\u751f\u6d3b/life/#macdown45","text":"","title":"Macdown45"},{"location":"\u751f\u6d3b/life/#macdown46","text":"","title":"Macdown46"},{"location":"\u751f\u6d3b/life/#macdown47","text":"","title":"Macdown47"},{"location":"\u751f\u6d3b/life/#macdown48","text":"","title":"Macdown48"},{"location":"\u751f\u6d3b/life/#macdown49","text":"","title":"Macdown49"},{"location":"\u751f\u6d3b/life/#macdown50","text":"","title":"Macdown50"},{"location":"\u751f\u6d3b/life/#markdown-and-i","text":"Markdown is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found here . MacDown is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel. I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the Markdown preference pane . You can specify extra HTML rendering options through the Rendering preference pane . You can customize the editor window to you liking in the Editor preferences pane : You can configure various application (that's me!) behaviors in the General preference pane .","title":"Markdown and I"},{"location":"\u751f\u6d3b/life/#the-basics","text":"Before I tell you about all the extra syntaxes and capabilities I have, I'll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the Markdown preference pane . Lets jump right in.","title":"The Basics"},{"location":"\u751f\u6d3b/life/#line-breaks","text":"To force a line break, put two spaces and a newline (return) at the end of the line. This two-line bullet won't break This two-line bullet will break Here is the code: * This two-line bullet won't break * This two-line bullet will break","title":"Line Breaks"},{"location":"\u751f\u6d3b/life/#strong-and-emphasize","text":"Strong : **Strong** or __Strong__ (Command-B) Emphasize : *Emphasize* or _Emphasize_ [^emphasize] (Command-I)","title":"Strong and Emphasize"},{"location":"\u751f\u6d3b/life/#headers-like-this-one","text":"Header 1 ======== Header 2 -------- or # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6","title":"Headers (like this one!)"},{"location":"\u751f\u6d3b/life/#links-and-email","text":"","title":"Links and Email"},{"location":"\u751f\u6d3b/life/#inline","text":"Just put angle brackets around an email and it becomes clickable: uranusjr@gmail.com Same thing with urls: http://macdown.uranusjr.com http://macdown.uranusjr.com Perhaps you want to some link text like this: Macdown Website [Macdown Website](http://macdown.uranusjr.com \"Title\") (The title is optional)","title":"Inline"},{"location":"\u751f\u6d3b/life/#reference-style","text":"Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together. Make a link [a link][arbitrary_id] then on it's own line anywhere else in the file: [arbitrary_id]: http://macdown.uranusjr.com \"Title\" If the link text itself would make a good id, you can link like this [like this][] , then on it's own line anywhere else in the file: [like this]: http://macdown.uranusjr.com","title":"Reference style"},{"location":"\u751f\u6d3b/life/#images","text":"","title":"Images"},{"location":"\u751f\u6d3b/life/#inline_1","text":"![Alt Image Text](path/or/url/to.jpg \"Optional Title\")","title":"Inline"},{"location":"\u751f\u6d3b/life/#reference-style_1","text":"![Alt Image Text][image-id] on it's own line elsewhere: [image-id]: path/or/url/to.jpg \"Optional Title\"","title":"Reference style"},{"location":"\u751f\u6d3b/life/#lists","text":"Lists must be preceded by a blank line (or block element) Unordered lists start each item with a * - works too Indent a level to make a nested list Ordered lists are supported. Start each item (number-period-space) like 1. It doesn't matter what number you use, I will render them sequentially So you might want to start each line with 1. and let me sort it out Here is the code: * Lists must be preceded by a blank line (or block element) * Unordered lists start each item with a `*` - `-` works too * Indent a level to make a nested list 1. Ordered lists are supported. 2. Start each item (number-period-space) like `1. ` 42. It doesn't matter what number you use, I will render them sequentially 1. So you might want to start each line with `1.` and let me sort it out","title":"Lists"},{"location":"\u751f\u6d3b/life/#block-quote","text":"Angle brackets are used for block quotes. Technically not every line needs to start with a as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. Lists Links Etc. Here is the code: Angle brackets ` ` are used for block quotes. Technically not every line needs to start with a ` ` as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. * Lists * [Links][arbitrary_id] * Etc.","title":"Block Quote"},{"location":"\u751f\u6d3b/life/#inline-code","text":"Inline code is indicated by surrounding it with backticks: `Inline code` If your code has `backticks` that need to be displayed, you can use double backticks: ``Code with `backticks` `` (mind the spaces preceding the final set of backticks)","title":"Inline Code"},{"location":"\u751f\u6d3b/life/#block-code","text":"If you indent at least four spaces or one tab, I'll display a code block. print('This is a code block') print('The block must be preceded by a blank line') print('Then indent at least 4 spaces or 1 tab') print('Nesting does nothing. Your code is displayed Literally') I also know how to do something called Fenced Code Blocks which I will tell you about later.","title":"Block Code"},{"location":"\u751f\u6d3b/life/#horizontal-rules","text":"If you type three asterisks *** or three dashes --- on a line, I'll display a horizontal rule:","title":"Horizontal Rules"},{"location":"\u751f\u6d3b/life/#document-formatting","text":"The Smartypants extension automatically transforms straight quotes ( \" and ' ) in your text into typographer\u2019s quotes ( \u201c , \u201d , \u2018 , and \u2019 ) according to the context. Very useful if you\u2019re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.","title":"Document Formatting"},{"location":"\u751f\u6d3b/life/#block-formatting","text":"","title":"Block Formatting"},{"location":"\u751f\u6d3b/life/#table","text":"This is a table: First Header Second Header Content Cell Content Cell Content Cell Content Cell You can align cell contents with syntax like this: Left Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 The left- and right-most pipes ( | ) are only aesthetic, and can be omitted. The spaces don\u2019t matter, either. Alignment depends solely on : marks.","title":"Table"},{"location":"\u751f\u6d3b/life/#fenced-code-block","text":"This is a fenced code block: print('Hello world!') You can also use waves ( ~ ) instead of back ticks ( ` ): print('Hello world!') You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the Enable highlighting in code blocks option. This is what happens if you enable it: I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See relevant sections on the official site for a full list of supported syntaxes.","title":"Fenced Code Block"},{"location":"\u751f\u6d3b/life/#inline-formatting","text":"The following is a list of optional inline markups supported: Option name Markup Result if enabled Intra-word emphasis So A*maz*ing So A maz ing Strikethrough \\~~Much wow\\~~ Much wow Underline [^under] _So doge_ So doge Quote [^quote] \\\"Such editor\\\" Such editor Highlight \\==So good\\== So good Superscript hoge\\^(fuga) hoge fuga Autolink http://t.co http://t.co Footnotes [\\^4] and [\\^4]: [^4] and footnote 4 [^4]: You don't have to use a number. Arbitrary things like [^footy note4] and [^footy note4]: will also work. But they will render as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes.","title":"Inline Formatting"},{"location":"\u751f\u6d3b/life/#css","text":"You can choose different css files for me to use to render your html. You can even customize or add your own custom css files.","title":"CSS"},{"location":"\u751f\u6d3b/life/#syntax-highlighting","text":"You have already seen how I can syntax highlight your fenced code blocks. See the Fenced Code Block section if you haven\u2019t! You can also choose different themes for syntax highlighting.","title":"Syntax Highlighting"},{"location":"\u751f\u6d3b/life/#tex-like-math-syntax","text":"I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): 1 + 1 , and block math: \\[ A^T_S = B \\] or (in MathML) A S T = B","title":"TeX-like Math Syntax"},{"location":"\u751f\u6d3b/life/#task-list-syntax","text":"[x] I can render checkbox list syntax [x] I support nesting [x] I support ordered and unordered lists [ ] I don't support clicking checkboxes directly in the html window","title":"Task List Syntax"},{"location":"\u751f\u6d3b/life/#jekyll-front-matter","text":"If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with --- . For example: --- title: Macdown is my friend date: 2014-06-06 20:00:00 ---","title":"Jekyll front-matter"},{"location":"\u751f\u6d3b/life/#render-newline-literally","text":"Normally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some other program render it.","title":"Render newline literally"},{"location":"\u751f\u6d3b/life/#styling","text":"My editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of Mou \u2019s creator, Chen Luo) if you don\u2019t know where to start. You can also edit, or even add new themes if you want to! Just click the Reveal button, and start moving things around. Remember to use the correct file extension ( .styles ), though. I\u2019m picky about that. I offer auto-completion and other functions to ease your editing experience. If you don\u2019t like it, however, you can turn them off.","title":"Styling"},{"location":"\u751f\u6d3b/life/#hack-on","text":"That\u2019s about it. Thanks for listening. I\u2019ll be quiet from now on (unless there\u2019s an update about the app\u2014I\u2019ll remind you for that!). Happy writing! [^emphasize]: If Underlines is turned on, _this notation_ will render as underlined instead of emphasized [^under]: If Underline is disabled _this_ will be rendered as emphasized instead of being underlined. [^quote]: Quote replaces literal \" characters with html q tags. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Note that Quote is different from blockquote , which is part of standard Markdown. [^math]: Internet connection required.","title":"Hack On"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/","text":"Shell Hello there! I\u2019m MacDown , the open source Markdown editor for OS X. Let me introduce myself. Markdown and I Markdown is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found here . MacDown is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel. I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the Markdown preference pane . You can specify extra HTML rendering options through the Rendering preference pane . You can customize the editor window to you liking in the Editor preferences pane : You can configure various application (that's me!) behaviors in the General preference pane . The Basics Before I tell you about all the extra syntaxes and capabilities I have, I'll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the Markdown preference pane . Lets jump right in. Line Breaks To force a line break, put two spaces and a newline (return) at the end of the line. This two-line bullet won't break This two-line bullet will break Here is the code: * This two-line bullet won't break * This two-line bullet will break Strong and Emphasize Strong : **Strong** or __Strong__ (Command-B) Emphasize : *Emphasize* or _Emphasize_ [^emphasize] (Command-I) Headers (like this one!) Header 1 ======== Header 2 -------- or # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6 Links and Email Inline Just put angle brackets around an email and it becomes clickable: uranusjr@gmail.com Same thing with urls: http://macdown.uranusjr.com http://macdown.uranusjr.com Perhaps you want to some link text like this: Macdown Website [Macdown Website](http://macdown.uranusjr.com \"Title\") (The title is optional) Reference style Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together. Make a link [a link][arbitrary_id] then on it's own line anywhere else in the file: [arbitrary_id]: http://macdown.uranusjr.com \"Title\" If the link text itself would make a good id, you can link like this [like this][] , then on it's own line anywhere else in the file: [like this]: http://macdown.uranusjr.com Images Inline ![Alt Image Text](path/or/url/to.jpg \"Optional Title\") Reference style ![Alt Image Text][image-id] on it's own line elsewhere: [image-id]: path/or/url/to.jpg \"Optional Title\" Lists Lists must be preceded by a blank line (or block element) Unordered lists start each item with a * - works too Indent a level to make a nested list Ordered lists are supported. Start each item (number-period-space) like 1. It doesn't matter what number you use, I will render them sequentially So you might want to start each line with 1. and let me sort it out Here is the code: * Lists must be preceded by a blank line (or block element) * Unordered lists start each item with a `*` - `-` works too * Indent a level to make a nested list 1. Ordered lists are supported. 2. Start each item (number-period-space) like `1. ` 42. It doesn't matter what number you use, I will render them sequentially 1. So you might want to start each line with `1.` and let me sort it out Block Quote Angle brackets are used for block quotes. Technically not every line needs to start with a as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. Lists Links Etc. Here is the code: Angle brackets ` ` are used for block quotes. Technically not every line needs to start with a ` ` as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. * Lists * [Links][arbitrary_id] * Etc. Inline Code Inline code is indicated by surrounding it with backticks: `Inline code` If your code has `backticks` that need to be displayed, you can use double backticks: ``Code with `backticks` `` (mind the spaces preceding the final set of backticks) Block Code If you indent at least four spaces or one tab, I'll display a code block. print('This is a code block') print('The block must be preceded by a blank line') print('Then indent at least 4 spaces or 1 tab') print('Nesting does nothing. Your code is displayed Literally') I also know how to do something called Fenced Code Blocks which I will tell you about later. Horizontal Rules If you type three asterisks *** or three dashes --- on a line, I'll display a horizontal rule: The Markdown Preference Pane This is where I keep all preferences related to how I parse markdown into html. Document Formatting The Smartypants extension automatically transforms straight quotes ( \" and ' ) in your text into typographer\u2019s quotes ( \u201c , \u201d , \u2018 , and \u2019 ) according to the context. Very useful if you\u2019re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Block Formatting Table This is a table: First Header Second Header Content Cell Content Cell Content Cell Content Cell You can align cell contents with syntax like this: Left Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 The left- and right-most pipes ( | ) are only aesthetic, and can be omitted. The spaces don\u2019t matter, either. Alignment depends solely on : marks. Fenced Code Block This is a fenced code block: print('Hello world!') You can also use waves ( ~ ) instead of back ticks ( ` ): print('Hello world!') You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the Enable highlighting in code blocks option. This is what happens if you enable it: I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See relevant sections on the official site for a full list of supported syntaxes. Inline Formatting The following is a list of optional inline markups supported: Option name Markup Result if enabled Intra-word emphasis So A*maz*ing So A maz ing Strikethrough \\~~Much wow\\~~ Much wow Underline [^under] _So doge_ So doge Quote [^quote] \\\"Such editor\\\" Such editor Highlight \\==So good\\== So good Superscript hoge\\^(fuga) hoge fuga Autolink http://t.co http://t.co Footnotes [\\^4] and [\\^4]: [^4] and footnote 4 [^4]: You don't have to use a number. Arbitrary things like [^footy note4] and [^footy note4]: will also work. But they will render as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. The Rendering Preference Pane This is where I keep preferences relating to how I render and style the parsed markdown in the preview window. CSS You can choose different css files for me to use to render your html. You can even customize or add your own custom css files. Syntax Highlighting You have already seen how I can syntax highlight your fenced code blocks. See the Fenced Code Block section if you haven\u2019t! You can also choose different themes for syntax highlighting. TeX-like Math Syntax I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): 1 + 1 , and block math: \\[ A^T_S = B \\] or (in MathML) A S T = B Task List Syntax [x] I can render checkbox list syntax [x] I support nesting [x] I support ordered and unordered lists [ ] I don't support clicking checkboxes directly in the html window Jekyll front-matter If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with --- . For example: --- title: Macdown is my friend date: 2014-06-06 20:00:00 --- Render newline literally Normally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some other program render it. The General Preferences Pane This is where I keep preferences related to application behavior. The General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit command-R instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases. The Editor Preference Pane This is where I keep preferences related to the behavior and styling of the editing window. Styling My editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of Mou \u2019s creator, Chen Luo) if you don\u2019t know where to start. You can also edit, or even add new themes if you want to! Just click the Reveal button, and start moving things around. Remember to use the correct file extension ( .styles ), though. I\u2019m picky about that. I offer auto-completion and other functions to ease your editing experience. If you don\u2019t like it, however, you can turn them off. Hack On That\u2019s about it. Thanks for listening. I\u2019ll be quiet from now on (unless there\u2019s an update about the app\u2014I\u2019ll remind you for that!). Happy writing! [^emphasize]: If Underlines is turned on, _this notation_ will render as underlined instead of emphasized [^under]: If Underline is disabled _this_ will be rendered as emphasized instead of being underlined. [^quote]: Quote replaces literal \" characters with html q tags. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Note that Quote is different from blockquote , which is part of standard Markdown. [^math]: Internet connection required.","title":"Shell"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#shell","text":"Hello there! I\u2019m MacDown , the open source Markdown editor for OS X. Let me introduce myself.","title":"Shell"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#markdown-and-i","text":"Markdown is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found here . MacDown is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel. I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the Markdown preference pane . You can specify extra HTML rendering options through the Rendering preference pane . You can customize the editor window to you liking in the Editor preferences pane : You can configure various application (that's me!) behaviors in the General preference pane .","title":"Markdown and I"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#the-basics","text":"Before I tell you about all the extra syntaxes and capabilities I have, I'll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the Markdown preference pane . Lets jump right in.","title":"The Basics"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#line-breaks","text":"To force a line break, put two spaces and a newline (return) at the end of the line. This two-line bullet won't break This two-line bullet will break Here is the code: * This two-line bullet won't break * This two-line bullet will break","title":"Line Breaks"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#strong-and-emphasize","text":"Strong : **Strong** or __Strong__ (Command-B) Emphasize : *Emphasize* or _Emphasize_ [^emphasize] (Command-I)","title":"Strong and Emphasize"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#headers-like-this-one","text":"Header 1 ======== Header 2 -------- or # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6","title":"Headers (like this one!)"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#links-and-email","text":"","title":"Links and Email"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#inline","text":"Just put angle brackets around an email and it becomes clickable: uranusjr@gmail.com Same thing with urls: http://macdown.uranusjr.com http://macdown.uranusjr.com Perhaps you want to some link text like this: Macdown Website [Macdown Website](http://macdown.uranusjr.com \"Title\") (The title is optional)","title":"Inline"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#reference-style","text":"Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together. Make a link [a link][arbitrary_id] then on it's own line anywhere else in the file: [arbitrary_id]: http://macdown.uranusjr.com \"Title\" If the link text itself would make a good id, you can link like this [like this][] , then on it's own line anywhere else in the file: [like this]: http://macdown.uranusjr.com","title":"Reference style"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#images","text":"","title":"Images"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#inline_1","text":"![Alt Image Text](path/or/url/to.jpg \"Optional Title\")","title":"Inline"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#reference-style_1","text":"![Alt Image Text][image-id] on it's own line elsewhere: [image-id]: path/or/url/to.jpg \"Optional Title\"","title":"Reference style"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#lists","text":"Lists must be preceded by a blank line (or block element) Unordered lists start each item with a * - works too Indent a level to make a nested list Ordered lists are supported. Start each item (number-period-space) like 1. It doesn't matter what number you use, I will render them sequentially So you might want to start each line with 1. and let me sort it out Here is the code: * Lists must be preceded by a blank line (or block element) * Unordered lists start each item with a `*` - `-` works too * Indent a level to make a nested list 1. Ordered lists are supported. 2. Start each item (number-period-space) like `1. ` 42. It doesn't matter what number you use, I will render them sequentially 1. So you might want to start each line with `1.` and let me sort it out","title":"Lists"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#block-quote","text":"Angle brackets are used for block quotes. Technically not every line needs to start with a as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. Lists Links Etc. Here is the code: Angle brackets ` ` are used for block quotes. Technically not every line needs to start with a ` ` as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. * Lists * [Links][arbitrary_id] * Etc.","title":"Block Quote"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#inline-code","text":"Inline code is indicated by surrounding it with backticks: `Inline code` If your code has `backticks` that need to be displayed, you can use double backticks: ``Code with `backticks` `` (mind the spaces preceding the final set of backticks)","title":"Inline Code"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#block-code","text":"If you indent at least four spaces or one tab, I'll display a code block. print('This is a code block') print('The block must be preceded by a blank line') print('Then indent at least 4 spaces or 1 tab') print('Nesting does nothing. Your code is displayed Literally') I also know how to do something called Fenced Code Blocks which I will tell you about later.","title":"Block Code"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#horizontal-rules","text":"If you type three asterisks *** or three dashes --- on a line, I'll display a horizontal rule:","title":"Horizontal Rules"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#document-formatting","text":"The Smartypants extension automatically transforms straight quotes ( \" and ' ) in your text into typographer\u2019s quotes ( \u201c , \u201d , \u2018 , and \u2019 ) according to the context. Very useful if you\u2019re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.","title":"Document Formatting"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#block-formatting","text":"","title":"Block Formatting"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#table","text":"This is a table: First Header Second Header Content Cell Content Cell Content Cell Content Cell You can align cell contents with syntax like this: Left Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 The left- and right-most pipes ( | ) are only aesthetic, and can be omitted. The spaces don\u2019t matter, either. Alignment depends solely on : marks.","title":"Table"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#fenced-code-block","text":"This is a fenced code block: print('Hello world!') You can also use waves ( ~ ) instead of back ticks ( ` ): print('Hello world!') You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the Enable highlighting in code blocks option. This is what happens if you enable it: I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See relevant sections on the official site for a full list of supported syntaxes.","title":"Fenced Code Block"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#inline-formatting","text":"The following is a list of optional inline markups supported: Option name Markup Result if enabled Intra-word emphasis So A*maz*ing So A maz ing Strikethrough \\~~Much wow\\~~ Much wow Underline [^under] _So doge_ So doge Quote [^quote] \\\"Such editor\\\" Such editor Highlight \\==So good\\== So good Superscript hoge\\^(fuga) hoge fuga Autolink http://t.co http://t.co Footnotes [\\^4] and [\\^4]: [^4] and footnote 4 [^4]: You don't have to use a number. Arbitrary things like [^footy note4] and [^footy note4]: will also work. But they will render as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes.","title":"Inline Formatting"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#css","text":"You can choose different css files for me to use to render your html. You can even customize or add your own custom css files.","title":"CSS"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#syntax-highlighting","text":"You have already seen how I can syntax highlight your fenced code blocks. See the Fenced Code Block section if you haven\u2019t! You can also choose different themes for syntax highlighting.","title":"Syntax Highlighting"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#tex-like-math-syntax","text":"I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): 1 + 1 , and block math: \\[ A^T_S = B \\] or (in MathML) A S T = B","title":"TeX-like Math Syntax"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#task-list-syntax","text":"[x] I can render checkbox list syntax [x] I support nesting [x] I support ordered and unordered lists [ ] I don't support clicking checkboxes directly in the html window","title":"Task List Syntax"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#jekyll-front-matter","text":"If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with --- . For example: --- title: Macdown is my friend date: 2014-06-06 20:00:00 ---","title":"Jekyll front-matter"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#render-newline-literally","text":"Normally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some other program render it.","title":"Render newline literally"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#styling","text":"My editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of Mou \u2019s creator, Chen Luo) if you don\u2019t know where to start. You can also edit, or even add new themes if you want to! Just click the Reveal button, and start moving things around. Remember to use the correct file extension ( .styles ), though. I\u2019m picky about that. I offer auto-completion and other functions to ease your editing experience. If you don\u2019t like it, however, you can turn them off.","title":"Styling"},{"location":"\u8ba1\u7b97\u673a/devops/linux/linux/#hack-on","text":"That\u2019s about it. Thanks for listening. I\u2019ll be quiet from now on (unless there\u2019s an update about the app\u2014I\u2019ll remind you for that!). Happy writing! [^emphasize]: If Underlines is turned on, _this notation_ will render as underlined instead of emphasized [^under]: If Underline is disabled _this_ will be rendered as emphasized instead of being underlined. [^quote]: Quote replaces literal \" characters with html q tags. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Note that Quote is different from blockquote , which is part of standard Markdown. [^math]: Internet connection required.","title":"Hack On"},{"location":"\u8ba1\u7b97\u673a/help/help/","text":"+++ title = \"macdown help\" description = \"macdown markdown\" categories = [ \"\u5de5\u5177\", ] tags = [ \"markdown\", ] +++ MacDown Hello there! I\u2019m MacDown , the open source Markdown editor for OS X. Let me introduce myself. Markdown and I Markdown is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found here . MacDown is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel. I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the Markdown preference pane . You can specify extra HTML rendering options through the Rendering preference pane . You can customize the editor window to you liking in the Editor preferences pane : You can configure various application (that's me!) behaviors in the General preference pane . The Basics Before I tell you about all the extra syntaxes and capabilities I have, I'll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the Markdown preference pane . Lets jump right in. Line Breaks To force a line break, put two spaces and a newline (return) at the end of the line. This two-line bullet won't break This two-line bullet will break Here is the code: * This two-line bullet won't break * This two-line bullet will break Strong and Emphasize Strong : **Strong** or __Strong__ (Command-B) Emphasize : *Emphasize* or _Emphasize_ [^emphasize] (Command-I) Headers (like this one!) Header 1 ======== Header 2 -------- or # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6 Links and Email Inline Just put angle brackets around an email and it becomes clickable: uranusjr@gmail.com Same thing with urls: http://macdown.uranusjr.com http://macdown.uranusjr.com Perhaps you want to some link text like this: Macdown Website [Macdown Website](http://macdown.uranusjr.com \"Title\") (The title is optional) Reference style Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together. Make a link [a link][arbitrary_id] then on it's own line anywhere else in the file: [arbitrary_id]: http://macdown.uranusjr.com \"Title\" If the link text itself would make a good id, you can link like this [like this][] , then on it's own line anywhere else in the file: [like this]: http://macdown.uranusjr.com Images Inline ![Alt Image Text](path/or/url/to.jpg \"Optional Title\") Reference style ![Alt Image Text][image-id] on it's own line elsewhere: [image-id]: path/or/url/to.jpg \"Optional Title\" Lists Lists must be preceded by a blank line (or block element) Unordered lists start each item with a * - works too Indent a level to make a nested list Ordered lists are supported. Start each item (number-period-space) like 1. It doesn't matter what number you use, I will render them sequentially So you might want to start each line with 1. and let me sort it out Here is the code: * Lists must be preceded by a blank line (or block element) * Unordered lists start each item with a `*` - `-` works too * Indent a level to make a nested list 1. Ordered lists are supported. 2. Start each item (number-period-space) like `1. ` 42. It doesn't matter what number you use, I will render them sequentially 1. So you might want to start each line with `1.` and let me sort it out Block Quote Angle brackets are used for block quotes. Technically not every line needs to start with a as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. Lists Links Etc. Here is the code: Angle brackets ` ` are used for block quotes. Technically not every line needs to start with a ` ` as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. * Lists * [Links][arbitrary_id] * Etc. Inline Code Inline code is indicated by surrounding it with backticks: `Inline code` If your code has `backticks` that need to be displayed, you can use double backticks: ``Code with `backticks` `` (mind the spaces preceding the final set of backticks) Block Code If you indent at least four spaces or one tab, I'll display a code block. print('This is a code block') print('The block must be preceded by a blank line') print('Then indent at least 4 spaces or 1 tab') print('Nesting does nothing. Your code is displayed Literally') I also know how to do something called Fenced Code Blocks which I will tell you about later. Horizontal Rules If you type three asterisks *** or three dashes --- on a line, I'll display a horizontal rule: The Markdown Preference Pane This is where I keep all preferences related to how I parse markdown into html. Document Formatting The Smartypants extension automatically transforms straight quotes ( \" and ' ) in your text into typographer\u2019s quotes ( \u201c , \u201d , \u2018 , and \u2019 ) according to the context. Very useful if you\u2019re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Block Formatting Table This is a table: First Header Second Header Content Cell Content Cell Content Cell Content Cell You can align cell contents with syntax like this: Left Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 The left- and right-most pipes ( | ) are only aesthetic, and can be omitted. The spaces don\u2019t matter, either. Alignment depends solely on : marks. Fenced Code Block This is a fenced code block: print('Hello world!') You can also use waves ( ~ ) instead of back ticks ( ` ): print('Hello world!') You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the Enable highlighting in code blocks option. This is what happens if you enable it: I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See relevant sections on the official site for a full list of supported syntaxes. Inline Formatting The following is a list of optional inline markups supported: Option name Markup Result if enabled Intra-word emphasis So A*maz*ing So A maz ing Strikethrough \\~~Much wow\\~~ Much wow Underline [^under] _So doge_ So doge Quote [^quote] \\\"Such editor\\\" Such editor Highlight \\==So good\\== So good Superscript hoge\\^(fuga) hoge fuga Autolink http://t.co http://t.co Footnotes [\\^4] and [\\^4]: [^4] and footnote 4 [^4]: You don't have to use a number. Arbitrary things like [^footy note4] and [^footy note4]: will also work. But they will render as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. The Rendering Preference Pane This is where I keep preferences relating to how I render and style the parsed markdown in the preview window. CSS You can choose different css files for me to use to render your html. You can even customize or add your own custom css files. Syntax Highlighting You have already seen how I can syntax highlight your fenced code blocks. See the Fenced Code Block section if you haven\u2019t! You can also choose different themes for syntax highlighting. TeX-like Math Syntax I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): 1 + 1 , and block math: \\[ A^T_S = B \\] or (in MathML) A S T = B Task List Syntax [x] I can render checkbox list syntax [x] I support nesting [x] I support ordered and unordered lists [ ] I don't support clicking checkboxes directly in the html window Jekyll front-matter If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with --- . For example: --- title: Macdown is my friend date: 2014-06-06 20:00:00 --- Render newline literally Normally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some other program render it. The General Preferences Pane This is where I keep preferences related to application behavior. The General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit command-R instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases. The Editor Preference Pane This is where I keep preferences related to the behavior and styling of the editing window. Styling My editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of Mou \u2019s creator, Chen Luo) if you don\u2019t know where to start. You can also edit, or even add new themes if you want to! Just click the Reveal button, and start moving things around. Remember to use the correct file extension ( .styles ), though. I\u2019m picky about that. I offer auto-completion and other functions to ease your editing experience. If you don\u2019t like it, however, you can turn them off. Hack On That\u2019s about it. Thanks for listening. I\u2019ll be quiet from now on (unless there\u2019s an update about the app\u2014I\u2019ll remind you for that!). Happy writing! [^emphasize]: If Underlines is turned on, _this notation_ will render as underlined instead of emphasized [^under]: If Underline is disabled _this_ will be rendered as emphasized instead of being underlined. [^quote]: Quote replaces literal \" characters with html q tags. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Note that Quote is different from blockquote , which is part of standard Markdown. [^math]: Internet connection required.","title":"Help"},{"location":"\u8ba1\u7b97\u673a/help/help/#macdown","text":"Hello there! I\u2019m MacDown , the open source Markdown editor for OS X. Let me introduce myself.","title":"MacDown"},{"location":"\u8ba1\u7b97\u673a/help/help/#markdown-and-i","text":"Markdown is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found here . MacDown is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel. I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the Markdown preference pane . You can specify extra HTML rendering options through the Rendering preference pane . You can customize the editor window to you liking in the Editor preferences pane : You can configure various application (that's me!) behaviors in the General preference pane .","title":"Markdown and I"},{"location":"\u8ba1\u7b97\u673a/help/help/#the-basics","text":"Before I tell you about all the extra syntaxes and capabilities I have, I'll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the Markdown preference pane . Lets jump right in.","title":"The Basics"},{"location":"\u8ba1\u7b97\u673a/help/help/#line-breaks","text":"To force a line break, put two spaces and a newline (return) at the end of the line. This two-line bullet won't break This two-line bullet will break Here is the code: * This two-line bullet won't break * This two-line bullet will break","title":"Line Breaks"},{"location":"\u8ba1\u7b97\u673a/help/help/#strong-and-emphasize","text":"Strong : **Strong** or __Strong__ (Command-B) Emphasize : *Emphasize* or _Emphasize_ [^emphasize] (Command-I)","title":"Strong and Emphasize"},{"location":"\u8ba1\u7b97\u673a/help/help/#headers-like-this-one","text":"Header 1 ======== Header 2 -------- or # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6","title":"Headers (like this one!)"},{"location":"\u8ba1\u7b97\u673a/help/help/#links-and-email","text":"","title":"Links and Email"},{"location":"\u8ba1\u7b97\u673a/help/help/#inline","text":"Just put angle brackets around an email and it becomes clickable: uranusjr@gmail.com Same thing with urls: http://macdown.uranusjr.com http://macdown.uranusjr.com Perhaps you want to some link text like this: Macdown Website [Macdown Website](http://macdown.uranusjr.com \"Title\") (The title is optional)","title":"Inline"},{"location":"\u8ba1\u7b97\u673a/help/help/#reference-style","text":"Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together. Make a link [a link][arbitrary_id] then on it's own line anywhere else in the file: [arbitrary_id]: http://macdown.uranusjr.com \"Title\" If the link text itself would make a good id, you can link like this [like this][] , then on it's own line anywhere else in the file: [like this]: http://macdown.uranusjr.com","title":"Reference style"},{"location":"\u8ba1\u7b97\u673a/help/help/#images","text":"","title":"Images"},{"location":"\u8ba1\u7b97\u673a/help/help/#inline_1","text":"![Alt Image Text](path/or/url/to.jpg \"Optional Title\")","title":"Inline"},{"location":"\u8ba1\u7b97\u673a/help/help/#reference-style_1","text":"![Alt Image Text][image-id] on it's own line elsewhere: [image-id]: path/or/url/to.jpg \"Optional Title\"","title":"Reference style"},{"location":"\u8ba1\u7b97\u673a/help/help/#lists","text":"Lists must be preceded by a blank line (or block element) Unordered lists start each item with a * - works too Indent a level to make a nested list Ordered lists are supported. Start each item (number-period-space) like 1. It doesn't matter what number you use, I will render them sequentially So you might want to start each line with 1. and let me sort it out Here is the code: * Lists must be preceded by a blank line (or block element) * Unordered lists start each item with a `*` - `-` works too * Indent a level to make a nested list 1. Ordered lists are supported. 2. Start each item (number-period-space) like `1. ` 42. It doesn't matter what number you use, I will render them sequentially 1. So you might want to start each line with `1.` and let me sort it out","title":"Lists"},{"location":"\u8ba1\u7b97\u673a/help/help/#block-quote","text":"Angle brackets are used for block quotes. Technically not every line needs to start with a as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. Lists Links Etc. Here is the code: Angle brackets ` ` are used for block quotes. Technically not every line needs to start with a ` ` as long as there are no empty lines between paragraphs. Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. * Lists * [Links][arbitrary_id] * Etc.","title":"Block Quote"},{"location":"\u8ba1\u7b97\u673a/help/help/#inline-code","text":"Inline code is indicated by surrounding it with backticks: `Inline code` If your code has `backticks` that need to be displayed, you can use double backticks: ``Code with `backticks` `` (mind the spaces preceding the final set of backticks)","title":"Inline Code"},{"location":"\u8ba1\u7b97\u673a/help/help/#block-code","text":"If you indent at least four spaces or one tab, I'll display a code block. print('This is a code block') print('The block must be preceded by a blank line') print('Then indent at least 4 spaces or 1 tab') print('Nesting does nothing. Your code is displayed Literally') I also know how to do something called Fenced Code Blocks which I will tell you about later.","title":"Block Code"},{"location":"\u8ba1\u7b97\u673a/help/help/#horizontal-rules","text":"If you type three asterisks *** or three dashes --- on a line, I'll display a horizontal rule:","title":"Horizontal Rules"},{"location":"\u8ba1\u7b97\u673a/help/help/#document-formatting","text":"The Smartypants extension automatically transforms straight quotes ( \" and ' ) in your text into typographer\u2019s quotes ( \u201c , \u201d , \u2018 , and \u2019 ) according to the context. Very useful if you\u2019re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.","title":"Document Formatting"},{"location":"\u8ba1\u7b97\u673a/help/help/#block-formatting","text":"","title":"Block Formatting"},{"location":"\u8ba1\u7b97\u673a/help/help/#table","text":"This is a table: First Header Second Header Content Cell Content Cell Content Cell Content Cell You can align cell contents with syntax like this: Left Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 The left- and right-most pipes ( | ) are only aesthetic, and can be omitted. The spaces don\u2019t matter, either. Alignment depends solely on : marks.","title":"Table"},{"location":"\u8ba1\u7b97\u673a/help/help/#fenced-code-block","text":"This is a fenced code block: print('Hello world!') You can also use waves ( ~ ) instead of back ticks ( ` ): print('Hello world!') You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the Enable highlighting in code blocks option. This is what happens if you enable it: I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See relevant sections on the official site for a full list of supported syntaxes.","title":"Fenced Code Block"},{"location":"\u8ba1\u7b97\u673a/help/help/#inline-formatting","text":"The following is a list of optional inline markups supported: Option name Markup Result if enabled Intra-word emphasis So A*maz*ing So A maz ing Strikethrough \\~~Much wow\\~~ Much wow Underline [^under] _So doge_ So doge Quote [^quote] \\\"Such editor\\\" Such editor Highlight \\==So good\\== So good Superscript hoge\\^(fuga) hoge fuga Autolink http://t.co http://t.co Footnotes [\\^4] and [\\^4]: [^4] and footnote 4 [^4]: You don't have to use a number. Arbitrary things like [^footy note4] and [^footy note4]: will also work. But they will render as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes.","title":"Inline Formatting"},{"location":"\u8ba1\u7b97\u673a/help/help/#css","text":"You can choose different css files for me to use to render your html. You can even customize or add your own custom css files.","title":"CSS"},{"location":"\u8ba1\u7b97\u673a/help/help/#syntax-highlighting","text":"You have already seen how I can syntax highlight your fenced code blocks. See the Fenced Code Block section if you haven\u2019t! You can also choose different themes for syntax highlighting.","title":"Syntax Highlighting"},{"location":"\u8ba1\u7b97\u673a/help/help/#tex-like-math-syntax","text":"I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): 1 + 1 , and block math: \\[ A^T_S = B \\] or (in MathML) A S T = B","title":"TeX-like Math Syntax"},{"location":"\u8ba1\u7b97\u673a/help/help/#task-list-syntax","text":"[x] I can render checkbox list syntax [x] I support nesting [x] I support ordered and unordered lists [ ] I don't support clicking checkboxes directly in the html window","title":"Task List Syntax"},{"location":"\u8ba1\u7b97\u673a/help/help/#jekyll-front-matter","text":"If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with --- . For example: --- title: Macdown is my friend date: 2014-06-06 20:00:00 ---","title":"Jekyll front-matter"},{"location":"\u8ba1\u7b97\u673a/help/help/#render-newline-literally","text":"Normally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some other program render it.","title":"Render newline literally"},{"location":"\u8ba1\u7b97\u673a/help/help/#styling","text":"My editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of Mou \u2019s creator, Chen Luo) if you don\u2019t know where to start. You can also edit, or even add new themes if you want to! Just click the Reveal button, and start moving things around. Remember to use the correct file extension ( .styles ), though. I\u2019m picky about that. I offer auto-completion and other functions to ease your editing experience. If you don\u2019t like it, however, you can turn them off.","title":"Styling"},{"location":"\u8ba1\u7b97\u673a/help/help/#hack-on","text":"That\u2019s about it. Thanks for listening. I\u2019ll be quiet from now on (unless there\u2019s an update about the app\u2014I\u2019ll remind you for that!). Happy writing! [^emphasize]: If Underlines is turned on, _this notation_ will render as underlined instead of emphasized [^under]: If Underline is disabled _this_ will be rendered as emphasized instead of being underlined. [^quote]: Quote replaces literal \" characters with html q tags. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Note that Quote is different from blockquote , which is part of standard Markdown. [^math]: Internet connection required.","title":"Hack On"},{"location":"\u8ba1\u7b97\u673a/python/\u5217\u8868\u548c\u5143\u7ec4/","text":"\u5728python\u4e2d\uff0c\u6700\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\u662f\u5e8f\u5217 python\u4e2d\u5305\u542b6\u4e2d\u5185\u5efa\u7684\u5e8f\u5217(\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u3001Unicode\u5b57\u7b26\u4e32\u3001buffer\u5bf9\u8c61\u3001xrange\u5bf9\u8c61)\uff0c\u6700\u5e38\u7528\u7684\u4e24\u79cd\u662f\u5217\u8868\u548c\u5143\u7ec4 \u5217\u8868\u548c\u5143\u7ec4\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff1a\u5217\u8868\u53ef\u4ee5\u4fee\u6539\uff0c\u5143\u7ec4\u5219\u4e0d\u80fd \u901a\u7528\u7684\u5e8f\u5217\u64cd\u4f5c \u7d22\u5f15 \u5206\u7247\uff08\u7c7b\u4f3c\u4e8eshell\u4e2d\u7684\u5b57\u7b26\u4e32\u622a\u53d6\uff09 \u5e8f\u5217\u76f8\u52a0 \u4e58\u6cd5 \u6210\u5458\u8d44\u683c\uff08\u4f7f\u7528in\u51fd\u6570\uff09 \u957f\u5ea6\u3001\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c(len\u3001min\u548cmax\u51fd\u6570) \u5217\u8868\uff1apython\u7684\u201c\u82e6\u529b\u201d list\u51fd\u6570(\u5c06\u5e8f\u5217\u8f6c\u5316\u4e3a\u5217\u8868) \u5217\u8868\u4fee\u6539\u64cd\u4f5c \u5355\u4e2a\u5143\u7d20\u8d4b\u503c \u5220\u9664\u5143\u7d20\uff08del\u8bed\u53e5\uff09 \u5206\u7247\u8d4b\u503c\uff08\u4e00\u6b21\u4e3a\u591a\u4e2a\u5143\u7d20\u8d4b\u503c\uff09 \u5217\u8868\u65b9\u6cd5 append\uff08\u672b\u5c3e\u8ffd\u52a0\uff09 count\uff08\u7edf\u8ba1\u67d0\u4e2a\u5143\u7d20\u503c\u51fa\u73b0\u7684\u6b21\u6570\uff09 extend\uff08\u5728\u4e00\u4e2a\u5217\u8868\u7684\u672b\u5c3e\u8ffd\u52a0\u53e6\u5916\u4e00\u4e2a\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff09 index\uff08\u627e\u51fa\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u7d22\u5f15\u4f4d\u7f6e\uff09 insert\uff08\u5c06\u5bf9\u8c61\u63d2\u5165\u5230\u5217\u8868\u4e2d\u7684\u67d0\u4e2a\u7d22\u5f15\u524d\uff09 pop\uff08\u79fb\u9664\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u9ed8\u8ba4\u662f\u6700\u540e\u4e00\u4e2a\uff0c\u5e76\u4e14\u8fd4\u56de\u8be5\u5143\u7d20\u7684\u503c\uff09 remove\uff08\u79fb\u9664\u67d0\u4e2a\u503c\u5728\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\uff09 reverse\uff08\u5c06\u5217\u8868\u4e2d\u7684\u5143\u7d20\u53cd\u5411\u5b58\u653e\uff09 sort\uff08\u5bf9\u5217\u8868\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff09 \u9ad8\u7ea7\u6392\u5e8f\uff08\u4f7f\u7528cmp\u3001key\u3001reverse\u4e09\u4e2a\u53c2\u6570\uff09 \u5143\u7ec4\uff1a\u4e0d\u53ef\u4fee\u6539\u7684\u5e8f\u5217 tuple\u51fd\u6570\uff08\u5c06\u5e8f\u5217\u8f6c\u5316\u4e3a\u5143\u7ec4\uff09 \u5143\u7ec4\u53ef\u4ee5\u5728\u6620\u5c04\uff08\u548c\u96c6\u5408\u7684\u6210\u5458\uff09\u4e2d\u5f53\u505a\u952e\u4f7f\u7528\uff0c\u800c\u5217\u8868\u5219\u4e0d\u884c","title":"\u5217\u8868\u548c\u5143\u7ec4"},{"location":"\u8ba1\u7b97\u673a/python/\u57fa\u7840\u77e5\u8bc6/","text":"1\u3001\u7b97\u6cd5\u4e0d\u8fc7\u662f\u201c\u6b65\u9aa4\u201d\u6216\u8005\u201c\u98df\u8c31\u201d\u7684\u53e6\u5916\u4e00\u79cd\u6587\u7ec9\u7ec9\u7684\u8bf4\u6cd5\uff0c\u5728\u7f16\u5199\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u5c31\u662f\u8981\u4f7f\u7528\u8ba1\u7b97\u673a\u80fd\u591f\u7406\u89e3\u7684\u8bed\u8a00\u6765\u63cf\u8ff0\u7b97\u6cd5\uff0c\u8fd9\u7c7b\u5bf9\u673a\u5668\u53cb\u597d\u7684\u63cf\u8ff0\u5c31\u53eb\u505a\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u4e3b\u8981\u5305\u542b\u8868\u8fbe\u5f0f\u548c\u8bed\u53e5\u3002 2\u3001\u5b9e\u6570\uff08\u5305\u542b\u5c0f\u6570\u70b9\u7684\u6570\uff09\u5728python\u4e2d\u88ab\u79f0\u4e3a\u6d6e\u70b9\u6570 3\u3001/ \u6b63\u5e38\u60c5\u51b5\u4e0b\u662f\u6574\u9664\uff0c\u52a0\u4e0afrom future import division\u540e\u5c31\u53d8\u4e3a\u666e\u901a\u9664\u6cd5\u4e86 // \u6574\u9664(Python 2.2\u53ca\u540e\u7eed\u7248\u672c\u4e2d\u652f\u6301) % \u53d6\u4f59\uff1a\u6bcf\u969410\u5206\u949f\uff0c\u53ef\u4ee5\u68c0\u67e5\u65f6\u95f4%/10\u7684\u7ed3\u679c\u662f\u5426\u4e3a0 \u5e42\uff08\u4e58\u65b9\uff09 2 3=8 4\u3001\u957f\u6574\u6570 100000000000000000000000 100000000000000000000000L \u6570\u5b57\u7ed3\u5c3e\u52a0L\u8868\u793a\u957f\u6574\u6570 \u666e\u901a\u6574\u6570\u4e0d\u80fd\u5927\u4e8e2147483647\uff08\u4e5f\u4e0d\u80fd\u5c0f\u4e8e-2147483648\uff09\uff0c\u957f\u6574\u6570\u548c\u666e\u901a\u6574\u6570\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528 5\u3001\u53d8\u91cf\u540d\u53ef\u4ee5\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\uff0c\u53d8\u91cf\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934 6\u3001\u8d4b\u503c\u8bed\u53e5\u548cprint\u8bed\u53e5\uff0c\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f\u7684\u533a\u522b\uff1a\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668\u603b\u662f\u628a\u6240\u6709\u8868\u8fbe\u5f0f\u7684\u503c\u6253\u5370\u51fa\u6765\u3002\u8bed\u53e5\u7684\u4e00\u822c\u7279\u6027\u662f\u6539\u53d8\u4e86\u4e8b\u7269 7\u3001\u5728\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668\u4e2d\u4f7f\u7528if\u8bed\u53e5\uff0c\u9700\u8981\u6309\u4e24\u6b21\u56de\u8f66 8\u3001\u7528\u51fd\u6570pow\u4ee3\u66ff**\u505a\u4e58\u65b9\u8fd0\u7b97 2**3 8 pow(2,3) 8 abs\u51fd\u6570\u53d6\u7edd\u5bf9\u503c abs(-10) 10 round\u51fd\u6570\u56db\u820d\u4e94\u5165 round(1.0/2.0) 1.0 math.floor\u51fd\u6570\u5411\u4e0b\u53d6\u6574\uff0c32.9\u5c81\u5411\u4e0b\u53d6\u6574\u4e3a32\u5c81 import math math.floor(32.9) 32.0 int(math.floor(32.9)) 32 \u4e0efloor\u51fd\u6570\u76f8\u5bf9\u7684\u51fd\u6570\u662fceil\uff08\u5411\u4e0a\u53d6\u6574\uff09\uff0c32.1\u5c81\u5411\u4e0a\u53d6\u6574\u4e3a33\u5c81 9\u3001\u53ef\u4ee5\u4f7f\u7528\u53d8\u91cf\u6765\u5f15\u7528\u51fd\u6570\uff08\u6216\u8005python\u4e2d\u5927\u591a\u6570\u7684\u5bf9\u8c61\uff09\uff0c\u6bd4\u5982\u901a\u8fc7wqy=math.sqrt\u8fdb\u884c\u8d4b\u503c\uff0c\u7136\u540ewqy(4)\u7684\u7ed3\u679c\u4e3a2.0 import math wqy=math.sqrt wqy(4) 2.0 10\u3001\u865a\u6570\u5747\u4ee5j\uff08\u6216\u8005J\uff09\u7ed3\u5c3e import cmath cmath.sqrt(-1) 1j 11\u3001\u7528+\u62fc\u63a5\u5b57\u7b26\u4e32 \"hello,\" + \"world!\" \u2018hello,world!\u2019 12\u3001str\u3001repr\u3001\u548c\u53cd\u5f15\u53f7\u662f\u8bb2python\u503c\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u76843\u4e2d\u65b9\u6cd5\u3002\u51fd\u6570str\u8ba9\u5b57\u7b26\u4e32\u66f4\u6613\u4e8e\u9605\u8bfb\uff0c\u800crepr(\u548c\u53cd\u5f15\u53f7)\u5219\u5c06\u7ed3\u679c\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5408\u6cd5\u7684pyt python\u8868\u8fbe\u5f0f\u3002\u5728python3.0\u4e2d\uff0c\u5df2\u7ecf\u4e0d\u518d\u4f7f\u7528\u53cd\u5f15\u53f7\u4e86\u3002 13\u3001\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u4e0d\u80fd\u76f8\u52a0 14\u3001input\u4e0eraw_input\u7684\u533a\u522b\uff1ainput\u4f1a\u5047\u8bbe\u7528\u6237\u8f93\u5165\u7684\u662f\u5408\u6cd5\u7684python\u8868\u8fbe\u5f0f\uff0craw_input\u4f1a\u628a\u6240\u6709\u7684\u8f93\u5165\u5f53\u505a\u539f\u59cb\u6570\u636e\uff08raw data\uff09\uff0c\u7136\u540e\u5c06 \u5176\u653e\u5165\u5b57\u7b26\u4e32\u4e2d\uff0c\u9664\u975e\u5bf9input\u6709\u7279\u522b\u7684\u9700\u8981\uff0c\u5426\u5219\u5e94\u8be5\u5c3d\u53ef\u80fd\u4f7f\u7528raw_input\u51fd\u6570 15\u3001\u957f\u5b57\u7b26\u4e32\uff1a \u5982\u679c\u9700\u8981\u5199\u4e00\u4e2a\u975e\u5e38\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u9700\u8981\u8de8\u591a\u884c\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e09\u4e2a\u5f15\u53f7\u4ee3\u66ff\u666e\u901a\u5f15\u53f7\u3002 \u539f\u59cb\u5b57\u7b26\u4e32\uff1a \u539f\u59cb\u5b57\u7b26\u4e32\u4ee5r\u5f00\u5934\uff0c\u5728\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u53ef\u4ee5\u653e\u5165\u4efb\u4f55\u5b57\u7b26 print'hello,\\nworld!' hello, world print r'hello,\\nworld!' hello,\\nworld! \u539f\u59cb\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u80fd\u662f\u53cd\u659c\u7ebf Unicode\u5b57\u7b26\u4e32\uff1a Python\u4e2d\u7684\u666e\u901a\u5b57\u7b26\u4e32\u5728\u5185\u90e8\u662f\u4ee58\u4f4d\u7684ASCII\u7801\u5f62\u6210\u5b58\u50a8\u7684\uff0c\u800cUnicode\u5b57\u7b26\u4e32\u5219\u5b58\u50a8\u4e3a16\u4f4dUnicode\u5b57\u7b26\uff0c\u8fd9\u6837\u5c31\u80fd\u8868\u793a\u66f4\u591a\u7684\u5b57\u7b26\u96c6\u4e86\uff0c\u5305\u62ec\u4e16\u754c\u4e0a\u5927\u591a\u6570\u8bed\u8a00\u7684\u7279\u6b8a\u5b57\u7b26\u3002 \u5728Python 3.0\u4e2d\uff0c\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u662fUnicode\u5b57\u7b26\u4e32\u3002","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"\u8ba1\u7b97\u673a/python/\u5b57\u7b26\u4e32\u683c\u5f0f\u5316/","text":"\u5b57\u7b26\u4e32\u683c\u5f0f\u5316 hjh jyf","title":"\u5b57\u7b26\u4e32\u683c\u5f0f\u5316"}]}